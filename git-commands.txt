Git Commands:
------------------------
git pull origin dev/main           --> Fetch and merge the latest code from the remote to your local environment.
git checkout -b <branchname>/git branch <branchname>     --> Create a branch for making changes or working on your task.
git add <features/filename with extension>               --> Add the features you implemented to files.
git commit -m '<message describing changes>'             --> Commit the features locally (similar to saving or deploying).
git push origin <branchname>       --> Push the local branch to the remote repository. We don't directly push changes to the main branch; we push changes to our branch.
git push origin main/dev           --> Push changes to the main origin (when they are production-ready).
Pull Request/New Pull Request (PR) --> Create a pull request to showcase changes. Once created, reviewers can be added if necessary. 
Reviewing Pull Request             --> Click on 'Pull requests', review changes and files, write comments if necessary, and then start the review.
Merging Pull Request (MR)          --> Select the pull request to merge, click 'Merge pull request', and confirm the merge. 
After the merge, we delete the branch       --> Click on 'Delete branch' to delete the branch in the remote repository (not locally).
Delete Branch Locally              --> First, check "git branch". You can't delete the branch you're currently on. Switch to the main branch with "git checkout main", then pull changes with "git pull origin main", and finally delete the branch with "git branch -d {branchname}".
git branch -d <branchname>         --> Delete a branch that has been merged into the main repository.
git branch -D <branch-name>        --> Forcefully delete a branch, even if changes are not committed or merged.

Rename the current branch:
First, checkout to the branch you want to rename.
Use the command 'git branch -m <new-branch-name>' to rename the current branch.

Set upstream for the current branch:
To set upstream for the current branch, use the command 'git push -u origin <current-branch-name>'.
This way, you don't have to specify the branch name every time you use git push.

git checkout main  # Switch to the main branch
git merge task1    # Merge changes from task1 into main
git branch -d task1  # Safely delete the task1 branch

git branch                       --> List local branches
git branch -r                    --> List remote branches
git branch -a                    --> List both local and remote branches

git fetch origin main            --> Fetch details from the remote repository without merging the code.
git merge                        --> Merge the fetched changes.
git checkout <branchname>        --> Switch to main/dev/your feature branch.
git status                       --> Show the status of the project directory.
git diff                         --> Show differences in the project directory or files.
git branch                       --> Show the current branch.
git commit -a -m '<message>'     --> Add and commit changes simultaneously.

git stash save "message"          : This command saves your local changes to the stash with a descriptive message.
git stash list                    : Lists all stashed changes.
git stash show                    : Shows the changes in the most recent stash.
git stash show -p                 : Shows the changes in the most recent stash in patch format.
git stash apply                   : Applies the most recent stash to your working directory, leaving it in the stash list.
git stash apply stash@{n}         : Applies a specific stash from the stash list.
git stash pop                     : Applies the most recent stash to your working directory and removes it from the stash list.
git stash drop                    : Deletes the most recent stash from the stash list.
git stash clear                   : Removes all stashed changes from the stash list.
git stash branch <branch_name>    : Creates a new branch from a specific stash.

Git Branches
----------------------------------------------------
Git, by default, comes with the 'main' branch.
Directly pushing changes to 'main' is discouraged.
Github offers branch protection rules to prevent team members from directly pushing to main.
For every new task, create a separate branch (Avoid including multiple tasks in one branch). If multiple tasks are involved, use 'stash'.

Creating Branches & Pushing to a Created Branch
-----------------------------------------------------
Before creating a branch, ensure you have pulled the latest code from Git: git pull
Create a branch: git branch <branchname>
Change to the newly created branch: git checkout <branchname>
Make changes to your code.
Add changes: git add <filename>
Commit changes: git commit -m '<message>'
Push changes to the created branch: git push origin <yourbranchname>

(Q) Difference between git fetch and git pull, and when to use each?
Fetch is rarely used in real-world cases. Git fetch retrieves the latest changes from a remote repository without merging them into your current branch, whereas git pull fetches the changes and automatically merges them into your current branch.
Use git fetch when you want to see what changes have been made in the remote repository without integrating them into your local branch immediately. It's useful for reviewing changes before merging them.
Use git pull when you want to both fetch the latest changes from the remote repository and merge them into your current branch. This is typically used when you want to update your local branch with the latest changes from the remote repository and incorporate them into your work.

Git commands in real-world projects:
-----------------------------------------------------
1. **git clone:**
   **Explanation:** Clones a remote repository to create a local copy on your machine.
   **Example:** Cloning a repository to your local machine:
   ```bash
   git clone https://github.com/username/repository.git
   ```

2. **git pull:**
   **Explanation:** Fetches and merges changes from a remote repository into your local branch.
   **Example:** Pulling changes from the remote 'main' branch into your local 'main' branch:
   ```bash
   git pull origin main
   ```

3. **git add:**
   **Explanation:** Stages changes for commit. Adds changes to the staging area.
   **Example:** Staging specific files:
   ```bash
   git add file1.js file2.css
   ```

4. **git commit:**
   **Explanation:** Records staged changes and creates a new commit with a message.
   **Example:** Committing staged changes with a descriptive message:
   ```bash
   git commit -m "Add new feature"
   ```

5. **git push:**
   **Explanation:** Pushes your local commits to a remote repository.
   **Example:** Pushing your local 'main' branch to the remote 'main' branch:
   ```bash
   git push origin main
   ```

6. **git branch:**
   **Explanation:** Lists, creates, or switches branches.
   **Example:** Creating a new branch:
   ```bash
   git branch feature-branch
   ```

7. **git checkout:**
   **Explanation:** Switches to a different branch or commit.
   **Example:** Switching to an existing branch:
   ```bash
   git checkout feature-branch
   ```

8. **git merge:**
   **Explanation:** Integrates changes from one branch into another.
   **Example:** Merging 'feature-branch' into 'main' branch:
   ```bash
   git checkout main
   git merge feature-branch
   ```

9. **git status:**
   **Explanation:** Displays the status of your working directory and staged changes.
   **Example:** Checking the status of your repository:
   ```bash
   git status
   ```

10. **git log:**
    **Explanation:** Displays a history of commits.
    **Example:** Viewing commit history:
    ```bash
    git log
    ```

11. **git remote:**
    **Explanation:** Lists, adds, or manages remote repositories.
    **Example:** Listing remote repositories:
    ```bash
    git remote -v
    ```

12. **git fetch:**
    **Explanation:** Fetches changes from a remote repository without merging.
    **Example:** Fetching changes from the remote repository:
    ```bash
    git fetch origin
    ```

13. **git reset:**
    **Explanation:** Resets the state of the repository to a previous commit.
    **Example:** Resetting to a previous commit:
    ```bash
    git reset --hard <commit_hash>
    ```

14. **git stash:**
    **Explanation:** Temporarily saves changes in a "stash" to work on something else.
    **Example:** Stashing changes before switching branches:
    ```bash
    git stash
    ```

15. **git cherry-pick:**
    **Explanation:** Applies specific commits from one branch to another.
    **Example:** Applying a commit from 'feature-branch' to 'main':
    ```bash
    git cherry-pick <commit_hash>
    ```
    ----------------------------------------------------------------------------------------


If you have deleted a branch and want to recover it, you can use the following command:
```bash
git reflog
```
This command shows you a log of all the recent Git actions, including branch deletions. You'll see a list of commits with associated messages. Find the commit where you deleted the branch and look for the commit hash.
Then, recreate the branch using the commit hash:
```bash
git branch <branch-name> <commit-hash>
```
Replace `<branch-name>` with the name of the branch you want to recreate and `<commit-hash>` with the hash you obtained from the `git reflog` command.
For example:
```bash
git branch my-recovered-branch abc1234
```
This will recreate the branch at the specified commit. If the branch had uncommitted changes, you might need to reset or stash changes accordingly.
